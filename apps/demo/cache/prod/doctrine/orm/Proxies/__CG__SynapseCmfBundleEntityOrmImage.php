<?php

namespace Proxies\__CG__\Synapse\Cmf\Bundle\Entity\Orm;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Image extends \Synapse\Cmf\Bundle\Entity\Orm\Image implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'assetsWebPath', 'id', 'type', 'defaultFormat', 'tags', 'headline', 'alt', 'formattedImages', 'name', 'title', 'externalLink', 'file', 'createdAt', 'updatedAt', '' . "\0" . 'Synapse\\Cmf\\Bundle\\Entity\\Orm\\Image' . "\0" . 'delegatesCollection'];
        }

        return ['__isInitialized__', 'assetsWebPath', 'id', 'type', 'defaultFormat', 'tags', 'headline', 'alt', 'formattedImages', 'name', 'title', 'externalLink', 'file', 'createdAt', 'updatedAt', '' . "\0" . 'Synapse\\Cmf\\Bundle\\Entity\\Orm\\Image' . "\0" . 'delegatesCollection'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Image $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getFormattedImages()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFormattedImages', []);

        return parent::getFormattedImages();
    }

    /**
     * {@inheritDoc}
     */
    public function setFormattedImages(\Synapse\Cmf\Framework\Media\FormattedImage\Entity\FormattedImageCollection $formattedImages)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFormattedImages', [$formattedImages]);

        return parent::setFormattedImages($formattedImages);
    }

    /**
     * {@inheritDoc}
     */
    public function getWebPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWebPath', []);

        return parent::getWebPath();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function getTags()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTags', []);

        return parent::getTags();
    }

    /**
     * {@inheritDoc}
     */
    public function setTags(array $tags)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTags', [$tags]);

        return parent::setTags($tags);
    }

    /**
     * {@inheritDoc}
     */
    public function getHeadline()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHeadline', []);

        return parent::getHeadline();
    }

    /**
     * {@inheritDoc}
     */
    public function setHeadline($headline)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHeadline', [$headline]);

        return parent::setHeadline($headline);
    }

    /**
     * {@inheritDoc}
     */
    public function getAlt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAlt', []);

        return parent::getAlt();
    }

    /**
     * {@inheritDoc}
     */
    public function setAlt($alt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAlt', [$alt]);

        return parent::setAlt($alt);
    }

    /**
     * {@inheritDoc}
     */
    public function getFormattedImage($format)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFormattedImage', [$format]);

        return parent::getFormattedImage($format);
    }

    /**
     * {@inheritDoc}
     */
    public function getFormatWebPath($format = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFormatWebPath', [$format]);

        return parent::getFormatWebPath($format);
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultFormat($defaultFormat)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaultFormat', [$defaultFormat]);

        return parent::setDefaultFormat($defaultFormat);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getFile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFile', []);

        return parent::getFile();
    }

    /**
     * {@inheritDoc}
     */
    public function setFile(\Synapse\Cmf\Framework\Media\File\Entity\File $file)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFile', [$file]);

        return parent::setFile($file);
    }

    /**
     * {@inheritDoc}
     */
    public function getExternalLink()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExternalLink', []);

        return parent::getExternalLink();
    }

    /**
     * {@inheritDoc}
     */
    public function setExternalLink($externalLink)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExternalLink', [$externalLink]);

        return parent::setExternalLink($externalLink);
    }

    /**
     * {@inheritDoc}
     */
    public function normalize($scope = 'default')
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'normalize', [$scope]);

        return parent::normalize($scope);
    }

    /**
     * {@inheritDoc}
     */
    public function denormalize(array $data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'denormalize', [$data]);

        return parent::denormalize($data);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt($format = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', [$format]);

        return parent::getCreatedAt($format);
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt($format = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', [$format]);

        return parent::getUpdatedAt($format);
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function registerLoader($field, \Closure $delegate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'registerLoader', [$field, $delegate]);

        return parent::registerLoader($field, $delegate);
    }

    /**
     * {@inheritDoc}
     */
    public function registerLoaders(array $loaders)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'registerLoaders', [$loaders]);

        return parent::registerLoaders($loaders);
    }

}
